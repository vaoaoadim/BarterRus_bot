 HEAD
import asyncio
import time
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart
from aiogram.client.default import DefaultBotProperties

from config import BOT_TOKEN, CHANNEL_ID
from keyboards import main_kb, direction_kb, category_kb, back_button
from database import add_ad, get_last_ad_time
from barter_logic import format_ad

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

user_state = {}

@dp.message(CommandStart())
async def start(msg: Message):
    await msg.answer(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è —Ä–µ–∫–ª–∞–º—ã –ø–æ –±–∞—Ä—Ç–µ—Ä—É.\n"
        "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ—é –∑–∞—è–≤–∫—É –Ω–∞ –æ–±–º–µ–Ω —Ä–µ–∫–ª–∞–º–æ–π –Ω–∞ —Ç–æ–≤–∞—Ä/—É—Å–ª—É–≥—É –∏–ª–∏ –Ω–∞–æ–±–æ—Ä–æ—Ç.",
        reply_markup=main_kb
    )

@dp.message()
async def handle_text(msg: Message):
    user_id = msg.from_user.id
    text = msg.text.strip()

    if text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É":
        last_time = get_last_ad_time(user_id)
        now = int(time.time())

        if last_time and now - last_time < 43200:
            remaining = int((43200 - (now - last_time)) / 60)
            await msg.answer(f"‚è≥ –¢—ã —É–∂–µ –æ—Å—Ç–∞–≤–ª—è–ª –∑–∞—è–≤–∫—É. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {remaining} –º–∏–Ω—É—Ç.")
            return

        user_state[user_id] = {}
        await msg.answer("–í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞:", reply_markup=direction_kb)

    elif text == "üîô –ù–∞–∑–∞–¥":
        state = user_state.get(user_id, {})
        if "contact" in state:
            del state["contact"]
            await msg.answer("–£–∫–∞–∂–∏ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç (–Ω–∏–∫, —Ç–µ–ª–µ–≥—Ä–∞–º –∏–ª–∏ —Å—Å—ã–ª–∫–∞):", reply_markup=back_button)
        elif "description" in state:
            del state["description"]
            await msg.answer("–¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —á—Ç–æ —Ç—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ—à—å –∏–ª–∏ –∏—â–µ—à—å:", reply_markup=back_button)
        elif "title" in state:
            del state["title"]
            await msg.answer("–í–≤–µ–¥–∏ –∫—Ä–∞—Ç–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–≤–æ–µ–π –∑–∞—è–≤–∫–∏:", reply_markup=back_button)
        elif "category" in state:
            del state["category"]
            await msg.answer("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=category_kb)
        elif "direction" in state:
            del state["direction"]
            await msg.answer("–í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞:", reply_markup=direction_kb)
        else:
            user_state.pop(user_id, None)
            await msg.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_kb)

    elif user_id in user_state:
        state = user_state[user_id]
        if "title" not in state:
            state["title"] = text
            await msg.answer("–¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —á—Ç–æ —Ç—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ—à—å –∏–ª–∏ –∏—â–µ—à—å:", reply_markup=back_button)
        elif "description" not in state:
            state["description"] = text
            await msg.answer("–£–∫–∞–∂–∏ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç (–Ω–∏–∫, —Ç–µ–ª–µ–≥—Ä–∞–º –∏–ª–∏ —Å—Å—ã–ª–∫–∞):", reply_markup=back_button)
        elif "contact" not in state:
            state["contact"] = text
            add_ad(
                user_id=user_id,
                direction=state["direction"],
                category=state["category"],
                title=state["title"],
                description=state["description"],
                contact=state["contact"]
            )
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∫–∞–Ω–∞–ª
            await bot.send_message(CHANNEL_ID, format_ad((
                None, state["direction"], state["category"],
                state["title"], state["description"], state["contact"]
            )))
            await msg.answer("‚úÖ –¢–≤–æ—è –∑–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥!\n–í–æ–∑–≤—Ä–∞—â–∞–π—Å—è —á–µ—Ä–µ–∑ 12 —á–∞—Å–æ–≤, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é.", reply_markup=main_kb)
            del user_state[user_id]

@dp.callback_query(F.data.startswith("dir:"))
async def choose_category(callback: CallbackQuery):
    direction = callback.data.split(":")[1]
    user_state[callback.from_user.id] = {"direction": direction}
    await callback.message.answer("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=category_kb)

@dp.callback_query(F.data.startswith("cat:"))
async def ask_title(callback: CallbackQuery):
    category = callback.data.split(":")[1]
    user_state[callback.from_user.id]["category"] = category
    await callback.message.answer("–í–≤–µ–¥–∏ –∫—Ä–∞—Ç–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–≤–æ–µ–π –∑–∞—è–≤–∫–∏:", reply_markup=back_button)

async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

import asyncio
import time
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart
from aiogram.client.default import DefaultBotProperties

from config import BOT_TOKEN, CHANNEL_ID
from keyboards import main_kb, direction_kb, category_kb, back_button
from database import add_ad, get_last_ad_time
from barter_logic import format_ad

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

user_state = {}

@dp.message(CommandStart())
async def start(msg: Message):
    await msg.answer(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è —Ä–µ–∫–ª–∞–º—ã –ø–æ –±–∞—Ä—Ç–µ—Ä—É.\n"
        "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ—é –∑–∞—è–≤–∫—É –Ω–∞ –æ–±–º–µ–Ω —Ä–µ–∫–ª–∞–º–æ–π –Ω–∞ —Ç–æ–≤–∞—Ä/—É—Å–ª—É–≥—É –∏–ª–∏ –Ω–∞–æ–±–æ—Ä–æ—Ç.",
        reply_markup=main_kb
    )

@dp.message()
async def handle_text(msg: Message):
    user_id = msg.from_user.id
    text = msg.text.strip()

    if text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É":
        last_time = get_last_ad_time(user_id)
        now = int(time.time())

        if last_time and now - last_time < 43200:
            remaining = int((43200 - (now - last_time)) / 60)
            await msg.answer(f"‚è≥ –¢—ã —É–∂–µ –æ—Å—Ç–∞–≤–ª—è–ª –∑–∞—è–≤–∫—É. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {remaining} –º–∏–Ω—É—Ç.")
            return

        user_state[user_id] = {}
        await msg.answer("–í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞:", reply_markup=direction_kb)

    elif text == "üîô –ù–∞–∑–∞–¥":
        state = user_state.get(user_id, {})
        if "contact" in state:
            del state["contact"]
            await msg.answer("–£–∫–∞–∂–∏ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç (–Ω–∏–∫, —Ç–µ–ª–µ–≥—Ä–∞–º –∏–ª–∏ —Å—Å—ã–ª–∫–∞):", reply_markup=back_button)
        elif "description" in state:
            del state["description"]
            await msg.answer("–¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —á—Ç–æ —Ç—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ—à—å –∏–ª–∏ –∏—â–µ—à—å:", reply_markup=back_button)
        elif "title" in state:
            del state["title"]
            await msg.answer("–í–≤–µ–¥–∏ –∫—Ä–∞—Ç–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–≤–æ–µ–π –∑–∞—è–≤–∫–∏:", reply_markup=back_button)
        elif "category" in state:
            del state["category"]
            await msg.answer("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=category_kb)
        elif "direction" in state:
            del state["direction"]
            await msg.answer("–í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞:", reply_markup=direction_kb)
        else:
            user_state.pop(user_id, None)
            await msg.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_kb)

    elif user_id in user_state:
        state = user_state[user_id]
        if "title" not in state:
            state["title"] = text
            await msg.answer("–¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —á—Ç–æ —Ç—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ—à—å –∏–ª–∏ –∏—â–µ—à—å:", reply_markup=back_button)
        elif "description" not in state:
            state["description"] = text
            await msg.answer("–£–∫–∞–∂–∏ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç (–Ω–∏–∫, —Ç–µ–ª–µ–≥—Ä–∞–º –∏–ª–∏ —Å—Å—ã–ª–∫–∞):", reply_markup=back_button)
        elif "contact" not in state:
            state["contact"] = text
            add_ad(
                user_id=user_id,
                direction=state["direction"],
                category=state["category"],
                title=state["title"],
                description=state["description"],
                contact=state["contact"]
            )
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∫–∞–Ω–∞–ª
            await bot.send_message(CHANNEL_ID, format_ad((
                None, state["direction"], state["category"],
                state["title"], state["description"], state["contact"]
            )))
            await msg.answer("‚úÖ –¢–≤–æ—è –∑–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥!\n–í–æ–∑–≤—Ä–∞—â–∞–π—Å—è —á–µ—Ä–µ–∑ 12 —á–∞—Å–æ–≤, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é.", reply_markup=main_kb)
            del user_state[user_id]

@dp.callback_query(F.data.startswith("dir:"))
async def choose_category(callback: CallbackQuery):
    direction = callback.data.split(":")[1]
    user_state[callback.from_user.id] = {"direction": direction}
    await callback.message.answer("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=category_kb)

@dp.callback_query(F.data.startswith("cat:"))
async def ask_title(callback: CallbackQuery):
    category = callback.data.split(":")[1]
    user_state[callback.from_user.id]["category"] = category
    await callback.message.answer("–í–≤–µ–¥–∏ –∫—Ä–∞—Ç–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–≤–æ–µ–π –∑–∞—è–≤–∫–∏:", reply_markup=back_button)

async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
 276fa27 (Initial commit)
